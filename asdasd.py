# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from matplotlib import pyplot as plt
from PyQt5.QtWidgets import QFileDialog, QApplication, QMessageBox
import tkinter as tk
from tkinter import filedialog as fd
import csv
import os
import pandas as pn
import numpy as np
import sys
import string
from pathlib import Path
# from extra import Ui_Form
import math


class Ui_MainWindow(object):
    def file_selection(self):
        path = fd.askopenfilename(filetypes=(("csv files", "*.csv"), ("all files", "*.*")))
        if len(path) == 0:
            return None
        """tr_dosya seçimi yapılıyor ---eng_file selection"""
        with open(path, 'r') as self.csvfile:
            self.csvreader = pn.read_csv(self.csvfile)
            self.csvfile.close()
            """tr_dosya okuma ve listeye aktarma ---eng_read file and transfer to list"""
        self.columns = self.csvreader.columns
        """tr_nitelik isimleri tespit edildi---eng_attribute names detected"""
        self.lencolumns = len(self.columns)
        """tr_sutun sayıları tespit edildi ---eng_row and column counts detected"""
        self.lenline = len(self.csvreader[self.columns[0]])
        self.dat = self.csvreader.dtypes
        for i in range(self.lencolumns):
            # ilk eleman nan ise onu float kabul ediyor bu yüzden ilk eleman nan kontrolü yapılıyor eğer nan ise sonraki eleman kontrol edliyor
            if self.dat[i] != object:
                self.intcolumns_name.append(self.columns[i])
                self.columsum.append(self.csvreader[self.columns[i]].sum())
                """integer değerlerin sütun isimleri bir listede tutldu"""
                """tr_niteliklerin veri tipleri integer olan değerler üzerinden işlemler yapacağımız için o sutunları seçiyoruz"""
                """eng_we choose those columns because we will be performing operations on values whose data types are integer"""
                self.intcolumns.append(self.csvreader[self.columns[i]])

        for i in self.intcolumns_name:
            self.colcomboBox.addItem(i)
        self.missing_values_count = self.csvreader.isnull().sum()

    # -----------------------------------------------------------------------------------------------------------------------
    # eksik veri sayısına bağlı olarak çalışan fonk.
    def mising_data_count(self):
        dizi = self.csvreader.isnull().sum()
        self.toplam = sum(dizi)
        # eksik veri sayısı hesaplandı
        if self.toplam == 0:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText("No missing data")
            msg.setWindowTitle("Warning")
            msg.exec_()
            return None
        else:
            return 1

    # -----------------------------------------------------------------------------------------------------------------------
    # dosya seçilmiş mi kontrolü
    def check_file(self):
        if len(self.csvreader) == 0:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText("Please select file")
            msg.setWindowTitle("Warning")
            msg.exec_()
            return None
        else:
            return 1

    # -----------------------------------------------------------------------------------------------------------------------
    def missing_data_comp(self):
        """dosya seçilmemiş ise"""
        ad = self.check_file()
        if ad == None:
            return None
        self.check_file()
        """eksik veri yoksa :"""
        self.mising_data_count()
        if self.toplam == 0:
            return None
        # ortalamaya göre tamamlama
        if self.compcomboBox.currentText() == 'Mean':
            for i in self.intcolumns_name:
                self.csvreader[i].fillna(self.csvreader[i].mean(), inplace=True)
            self.csvreader.to_csv('car.csv', index=False)
        # Moda göre tamamlama
        if self.compcomboBox.currentText() == 'Mod':
            for i in self.intcolumns_name:
                self.csvreader[i].fillna(self.csvreader[i].mode(), inplace=True)
        # medyana göre tamamlama
        if self.compcomboBox.currentText() == 'Median':
            for i in self.intcolumns_name:
                self.csvreader[i].fillna(self.csvreader[i].median(), inplace=True)
        print(self.missing_values_count)
        self.textBrowser_5.setText(str(self.csvreader))
        print(self.csvreader)

    # -----------------------------------------------------------------------------------------------------------------------
    # eksik veri silinmesi
    def mising_data_delete(self):
        """dosya seçilmemiş ise"""
        ad = self.check_file()
        if ad == None:
            return None
        """eksik veri yoksa:"""
        asd = self.mising_data_count()
        if asd == None:
            return None
        #eksik veri sayısı 1/3den büyükse kısmı yapılmadı
        if self.toplam/self.lenline>1/3:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText("Missing data count is")
            msg.setWindowTitle("Warning")
            msg.exec_()

        self.csvreader = self.csvreader.dropna()
        print(self.csvreader)

    # -----------------------------------------------------------------------------------------------------------------------
    # nitelik üzerinde yapılmak istenen işlemi seçme fonk
    def select_fonction(self):
        variable = self.colcomboBox.currentText()
        fonc = self.precesscomboBox_2.currentText()
        if fonc == 'Average':
            fin = self.csvreader[variable].mean()
            self.textBrowser_2.setText(str(fonc) + " of the " + str(variable) + " column =" + str(fin))
        if fonc == 'Median':
            fin = self.csvreader[variable].median()
            self.textBrowser_2.setText(str(fonc) + " of the " + str(variable) + " column =" + str(fin))
        if fonc == 'Mode':
            fin = self.csvreader[variable].mode()
            self.textBrowser_2.setText(str(fonc) + " of the " + str(variable) + " column =" + str(fin))
        if fonc == 'Frequency':
            fig, ax = plt.subplots()
            fin = self.csvreader[variable].value_counts().plot(ax=ax, kind='bar', xlabel=variable, ylabel=fonc)
            plt.show()
        if fonc == 'IQR':
            sort_array = sorted(self.csvreader[variable])
            Q1 = self.csvreader[variable].quantile(0.25)
            Q3 = self.csvreader[variable].quantile(0.75)
            IQR = Q3 - Q1
            self.textBrowser_2.setText(variable + " column IQR is " + str(IQR))

        if fonc == 'Outliers':
            """1. çeyreğin 1.5 katı az 3. çeyreğin 1.5 katı fazla olan değerler aykırı değerlerdir"""
            pass
        if fonc == 'Five Number Summary':
            pass
        if fonc == 'Box Plot':
            pass
        if fonc == 'Variance and Standard Deviation':
            pass

    # -----------------------------------------------------------------------------------------------------------------------

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1204, 581)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setEnabled(True)
        self.tabWidget.setGeometry(QtCore.QRect(80, 20, 1051, 511))
        self.tabWidget.setStyleSheet("")
        self.tabWidget.setObjectName("tabWidget")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.fileselection = QtWidgets.QPushButton(self.tab_3)
        self.fileselection.setGeometry(QtCore.QRect(20, 40, 93, 28))
        self.fileselection.setObjectName("fileselection")
        self.fileselection.clicked.connect(self.file_selection)
        self.textEdit = QtWidgets.QTextEdit(self.tab_3)
        self.textEdit.setEnabled(False)
        self.textEdit.setGeometry(QtCore.QRect(20, 90, 171, 81))
        self.textEdit.viewport().setProperty("cursor", QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.textEdit.setObjectName("textEdit")
        self.label = QtWidgets.QLabel(self.tab_3)
        self.label.setGeometry(QtCore.QRect(280, 40, 101, 16))
        self.label.setObjectName("label")
        self.compcomboBox = QtWidgets.QComboBox(self.tab_3)
        self.compcomboBox.setGeometry(QtCore.QRect(280, 70, 91, 31))
        self.compcomboBox.setObjectName("compcomboBox")
        self.compcomboBox.addItem("")
        self.compcomboBox.addItem("")
        self.compcomboBox.addItem("")
        self.completebutton = QtWidgets.QPushButton(self.tab_3)
        self.completebutton.setGeometry(QtCore.QRect(280, 140, 93, 28))
        self.completebutton.setObjectName("completebutton")
        self.completebutton.clicked.connect(self.missing_data_comp)
        self.textEdit_2 = QtWidgets.QTextEdit(self.tab_3)
        self.textEdit_2.setEnabled(False)
        self.textEdit_2.setGeometry(QtCore.QRect(20, 190, 161, 81))
        self.textEdit_2.setObjectName("textEdit_2")
        self.label_2 = QtWidgets.QLabel(self.tab_3)
        self.label_2.setGeometry(QtCore.QRect(540, 40, 111, 16))
        self.label_2.setObjectName("label_2")
        self.deletebutton = QtWidgets.QPushButton(self.tab_3)
        self.deletebutton.setGeometry(QtCore.QRect(540, 140, 93, 28))
        self.deletebutton.setObjectName("deletebutton")
        self.deletebutton.clicked.connect(self.mising_data_delete)
        self.textBrowser_4 = QtWidgets.QTextBrowser(self.tab_3)
        self.textBrowser_4.setGeometry(QtCore.QRect(540, 200, 231, 231))
        self.textBrowser_4.setObjectName("textBrowser_4")
        self.textBrowser_5 = QtWidgets.QTextBrowser(self.tab_3)
        self.textBrowser_5.setGeometry(QtCore.QRect(280, 200, 231, 231))
        self.textBrowser_5.setObjectName("textBrowser_5")
        self.tabWidget.addTab(self.tab_3, "")
        self.tab_4 = QtWidgets.QWidget()
        self.tab_4.setObjectName("tab_4")
        self.label_3 = QtWidgets.QLabel(self.tab_4)
        self.label_3.setGeometry(QtCore.QRect(10, 20, 55, 16))
        self.label_3.setText("")
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.tab_4)
        self.label_4.setGeometry(QtCore.QRect(10, 20, 55, 16))
        self.label_4.setText("")
        self.label_4.setObjectName("label_4")
        self.textBrowser = QtWidgets.QTextBrowser(self.tab_4)
        self.textBrowser.setEnabled(False)
        self.textBrowser.setGeometry(QtCore.QRect(10, 20, 251, 51))
        self.textBrowser.setObjectName("textBrowser")
        self.label_5 = QtWidgets.QLabel(self.tab_4)
        self.label_5.setGeometry(QtCore.QRect(10, 90, 55, 16))
        self.label_5.setObjectName("label_5")
        self.colcomboBox = QtWidgets.QComboBox(self.tab_4)
        self.colcomboBox.setGeometry(QtCore.QRect(10, 120, 91, 22))
        self.colcomboBox.setObjectName("colcomboBox")
        self.label_6 = QtWidgets.QLabel(self.tab_4)
        self.label_6.setGeometry(QtCore.QRect(10, 180, 55, 16))
        self.label_6.setObjectName("label_6")
        self.precesscomboBox_2 = QtWidgets.QComboBox(self.tab_4)
        self.precesscomboBox_2.setGeometry(QtCore.QRect(10, 210, 73, 22))
        self.precesscomboBox_2.setObjectName("precesscomboBox_2")
        self.precesscomboBox_2.addItem("")
        self.precesscomboBox_2.addItem("")
        self.precesscomboBox_2.addItem("")
        self.precesscomboBox_2.addItem("")
        self.precesscomboBox_2.addItem("")
        self.precesscomboBox_2.addItem("")
        self.precesscomboBox_2.addItem("")
        self.precesscomboBox_2.addItem("")
        self.precesscomboBox_2.addItem("")
        self.pushButton = QtWidgets.QPushButton(self.tab_4)
        self.pushButton.setGeometry(QtCore.QRect(10, 260, 93, 28))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.select_fonction)
        self.textBrowser_2 = QtWidgets.QTextBrowser(self.tab_4)
        self.textBrowser_2.setGeometry(QtCore.QRect(280, 20, 381, 381))
        self.textBrowser_2.setObjectName("textBrowser_2")
        self.tabWidget.addTab(self.tab_4, "")
        self.tab_5 = QtWidgets.QWidget()
        self.tab_5.setObjectName("tab_5")
        self.tabWidget.addTab(self.tab_5, "")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.tabWidget.addTab(self.tab_2, "")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1204, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.tabWidget.setToolTip(_translate("MainWindow", "<html><head/><body><p><br/></p></body></html>"))
        self.fileselection.setText(_translate("MainWindow", "Select file"))
        self.textEdit.setHtml(_translate("MainWindow",
                                         "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                         "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
                                         "p, li { white-space: pre-wrap; }\n"
                                         "</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:7.8pt; font-weight:400; font-style:normal;\">\n"
                                         "<p align=\"justify\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" color:#aa0000;\">For more accurate</span></p>\n"
                                         "<p align=\"justify\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" color:#aa0000;\">results, complete or delete</span></p>\n"
                                         "<p align=\"justify\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" color:#aa0000;\">missing data.</span></p></body></html>"))
        self.label.setText(_translate("MainWindow", "Data Completion"))
        self.compcomboBox.setItemText(0, _translate("MainWindow", "Mod"))
        self.compcomboBox.setItemText(1, _translate("MainWindow", "Mean"))
        self.compcomboBox.setItemText(2, _translate("MainWindow", "Median"))
        self.completebutton.setText(_translate("MainWindow", "Complete"))
        self.textEdit_2.setHtml(_translate("MainWindow",
                                           "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                           "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
                                           "p, li { white-space: pre-wrap; }\n"
                                           "</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:7.8pt; font-weight:400; font-style:normal;\">\n"
                                           "<p align=\"justify\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt; color:#aa0000;\">Deletion of missing data </span></p>\n"
                                           "<p align=\"justify\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt; color:#aa0000;\">delete on a row basis</span></p>\n"
                                           "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:8pt;\"><br /></p></body></html>"))
        self.label_2.setText(_translate("MainWindow", "Data Deletion"))
        self.deletebutton.setText(_translate("MainWindow", "Delete"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), _translate("MainWindow", "Page"))
        self.textBrowser.setHtml(_translate("MainWindow",
                                            "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                            "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
                                            "p, li { white-space: pre-wrap; }\n"
                                            "</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:7.8pt; font-weight:400; font-style:normal;\">\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" color:#aa0000;\">Select the column you want to process</span></p>\n"
                                            "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; color:#aa0000;\"><br /></p></body></html>"))
        self.label_5.setText(_translate("MainWindow", "Columns:"))
        self.label_6.setText(_translate("MainWindow", "Process"))
        self.precesscomboBox_2.setItemText(0, _translate("MainWindow", "Average"))
        self.precesscomboBox_2.setItemText(1, _translate("MainWindow", "Median"))
        self.precesscomboBox_2.setItemText(2, _translate("MainWindow", "Mode"))
        self.precesscomboBox_2.setItemText(3, _translate("MainWindow", "Frequency"))
        self.precesscomboBox_2.setItemText(4, _translate("MainWindow", "IQR"))
        self.precesscomboBox_2.setItemText(5, _translate("MainWindow", "Outliers"))
        self.precesscomboBox_2.setItemText(6, _translate("MainWindow", "Five Number Summary"))
        self.precesscomboBox_2.setItemText(7, _translate("MainWindow", "Box Plot"))
        self.precesscomboBox_2.setItemText(8, _translate("MainWindow", "Variance and Standard Deviation"))

        self.pushButton.setText(_translate("MainWindow", "Calculate"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_4), _translate("MainWindow", "Page"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_5), _translate("MainWindow", "Page"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "Page"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "Page"))
        self.toplam = 0
        """integer niteliklerin ortalamasını hesaplamak için toplama yaparken kullanılan değişken"""
        self.lencolumns = 0
        """başka fonk. da kullnılmak için tanımlanan sutun sayısını tutar"""
        self.lenline = 0
        """her sutunun satır sayısı aynı olacağı için herhangi bir satırdaki sutun sayısını hesaplar"""
        self.lenIntcolumns = 0
        """integer veri tipindeki sutun sayısını tutar"""
        self.columns = []
        """sutunların isimlerini tutar"""
        self.intcolumns = []
        """integer veri tipindeki sutunları tutan liste"""
        self.intcolumns_name = []
        """integer değere ahpi sütunlerın isimlerini tutuyoruz"""
        self.mean = 0.0
        """tr__niteliklerin hangi türde değişkenlere sahip olduğunu tutan liste 
           eng__list holding what type of variables the attributes have"""
        self.dat = []
        """integer değerlere sahip niteliklerin toplamlarını tutar"""
        self.columsum = []
        """dosya yolunu kayıt ediyoruz"""
        self.csvfile = ''
        """eksik veri sayısını tutan değişken"""
        self.missing_values_count = 0
        """csv dosyası"""
        self.csvreader = ""


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
